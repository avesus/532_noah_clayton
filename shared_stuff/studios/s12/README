1)
Noah Goldstein & Clayton Knittel


2)
noah[10:36:00]:~/programs/classes/active/532/532_noah_clayton/shared_stuff/studios/s12/ace_client$ ./aclient hello world
noah[10:36:05]:~/programs/classes/active/532/532_noah_clayton/shared_stuff/studios/s12/ace_client$ ./aclient second try

noah[10:35:37]:~/programs/classes/active/532/532_noah_clayton/shared_stuff/studios/s12/ace_server$ ./aserver 
Arg[0]: ./aserver
New Acceptor On ->
	127.0.0.1:6005
./aclient
hello
world
./aclient
second
try

3)

Moved argc and argv to the new class. argc so the amount of strings to
send it known and argv for the actual contents.

4)

First verification step:
Added several includes.
	#include "ace/Timer_Queue_Adapters.h"
	#include "ace/OS.h"
	#include "ace/Timer_Heap_T.h"
	#include "ace/Timer_Heap.h"
	#include "ace/Event_Handler_Handle_Timeout_Upcall.h"

Added code your ask for in assignment:
	ACE_Thread_Timer_Queue_Adapter<ACE_Timer_Heap> timeout_threads;
	timeout_threads.activate();
	ACE_Time_Value t_interval(3, 0);
	ACE_Time_Value t_start(ACE_OS::gettimeofday());
	t_start += t_interval;
	timeout_threads.schedule(&sender, 0, t_start, t_interval);
	ACE_Thread_Manager::instance()->wait();

Second verification step:
Added one new include:
	#include "ace/Reactor.h"
	
Basically scrapped all the code from the previous. New code is as follows:
	ACE_Time_Value t_interval(3, 0);
	ACE_Time_Value t_delay(0, 0);
	ACE_Reactor::instance()->schedule_timer(&sender, 0, t_delay, t_interval);
	ACE_Reactor::instance()->run_reactor_event_loop();

5)

Only change was instead of wrapping the accept in a while loop the
entire setup of listening socket was wrapped in while(1) loop

6) Wasn't in the instructions but...

To do this I changed constructor (and also found that i had to call
acceptor.open() in the constructor otherwise the client would fail to
connect)